{"uid":"549d92c6c0276eb8","name":"test_find_pets_without_status","fullName":"tests.pet.test_get_pet_by_id#test_find_pets_without_status","historyId":"db9a362f55dcea7936d4c95e647eabce","time":{"start":1739170611133,"stop":1739170611692,"duration":559},"description":"Make a request without sending any `status` parameter","descriptionHtml":"<p>Make a request without sending any <code>status</code> parameter</p>\n","status":"failed","statusMessage":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"pet_api = <pages.pet_api.PetAPI object at 0x000002B6B2DED350>\n\n    def test_find_pets_without_status(pet_api):\n        \"\"\"Make a request without sending any `status` parameter\"\"\"\n        response = requests.get(f\"{pet_api.base_url}/findByStatus\")\n>       assert response.status_code == 400\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\npet\\test_get_pet_by_id.py:54: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":4,"retriesStatusChange":false,"beforeStages":[{"name":"pet_api","time":{"start":1739170611133,"stop":1739170611133,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests.pet"},{"name":"suite","value":"test_get_pet_by_id"},{"name":"host","value":"FatmaZenginoglu"},{"name":"thread","value":"33628-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.pet.test_get_pet_by_id"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"8995d614acf0d971","status":"failed","statusDetails":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1739170551780,"stop":1739170552328,"duration":548}},{"uid":"47204e5fb04de74b","status":"failed","statusDetails":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1739170508447,"stop":1739170509102,"duration":655}},{"uid":"93d185ddda312f59","status":"failed","statusDetails":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1739170331350,"stop":1739170331894,"duration":544}},{"uid":"f4e5fb5c32cfd092","status":"failed","statusDetails":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1739166658784,"stop":1739166659341,"duration":557}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"549d92c6c0276eb8.json","parameterValues":[]}