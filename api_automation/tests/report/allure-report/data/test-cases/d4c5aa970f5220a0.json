{"uid":"d4c5aa970f5220a0","name":"test_find_pets_without_status","fullName":"tests.pet.test_find_pets_by_status#test_find_pets_without_status","historyId":"3c716607be788c576340c077fe9377c9","time":{"start":1739170605497,"stop":1739170606064,"duration":567},"description":"Make a request without sending any `status` parameter","descriptionHtml":"<p>Make a request without sending any <code>status</code> parameter</p>\n","status":"failed","statusMessage":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"pet_api = <pages.pet_api.PetAPI object at 0x000002B6B2CB6690>\n\n    def test_find_pets_without_status(pet_api):\n        \"\"\"Make a request without sending any `status` parameter\"\"\"\n        response = requests.get(f\"{pet_api.base_url}/findByStatus\")\n>       assert response.status_code == 400\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\npet\\test_find_pets_by_status.py:38: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":4,"retriesStatusChange":false,"beforeStages":[{"name":"pet_api","time":{"start":1739170605497,"stop":1739170605497,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests.pet"},{"name":"suite","value":"test_find_pets_by_status"},{"name":"host","value":"FatmaZenginoglu"},{"name":"thread","value":"33628-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.pet.test_find_pets_by_status"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"fc5d373a71cfa547","status":"failed","statusDetails":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1739170545987,"stop":1739170546558,"duration":571}},{"uid":"3f29798cf1608be8","status":"failed","statusDetails":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1739170503253,"stop":1739170503840,"duration":587}},{"uid":"b38693a75c197611","status":"failed","statusDetails":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1739170326647,"stop":1739170327488,"duration":841}},{"uid":"9ce2444427982a1c","status":"failed","statusDetails":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1739166654566,"stop":1739166655127,"duration":561}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"d4c5aa970f5220a0.json","parameterValues":[]}