{"uid":"e2dac65ed559a7d7","name":"test_find_pets_by_invalid_status","fullName":"tests.pet.test_get_pet_by_id#test_find_pets_by_invalid_status","historyId":"a54802a19e69a09778ccd117e11b74ab","time":{"start":1739170610525,"stop":1739170611117,"duration":592},"description":"Send request with invalid `status=invalid`","descriptionHtml":"<p>Send request with invalid <code>status=invalid</code></p>\n","status":"failed","statusMessage":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"pet_api = <pages.pet_api.PetAPI object at 0x000002B6B2DECFD0>\n\n    def test_find_pets_by_invalid_status(pet_api):\n        \"\"\"Send request with invalid `status=invalid`\"\"\"\n        response = pet_api.find_pets_by_status(\"invalid\")\n>       assert response.status_code == 400\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\npet\\test_get_pet_by_id.py:48: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":4,"retriesStatusChange":false,"beforeStages":[{"name":"pet_api","time":{"start":1739170610525,"stop":1739170610525,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests.pet"},{"name":"suite","value":"test_get_pet_by_id"},{"name":"host","value":"FatmaZenginoglu"},{"name":"thread","value":"33628-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.pet.test_get_pet_by_id"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3b830047cf8e1bfb","status":"failed","statusDetails":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1739170551145,"stop":1739170551764,"duration":619}},{"uid":"85777b728d47765c","status":"failed","statusDetails":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1739170507863,"stop":1739170508431,"duration":568}},{"uid":"660bc464aced0cb1","status":"failed","statusDetails":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1739170330792,"stop":1739170331334,"duration":542}},{"uid":"6fb8d4dc26b1cf90","status":"failed","statusDetails":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1739166658215,"stop":1739166658770,"duration":555}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"e2dac65ed559a7d7.json","parameterValues":[]}